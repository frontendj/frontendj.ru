$typography: (
    'header-1': (
        'font-weight': 600,
        'font-size-mobile-min': 26px,
        'font-size-mobile-max': 30px,
        'line-height': 1.4,
        'font-size-desktop-min': 30px,
        'font-size-desktop-max': 36px,
    ),
    'header-2': (
        'font-weight': 600,
        'font-size-mobile-min': 22px,
        'font-size-mobile-max': 26px,
        'line-height': 1.32,
        'font-size-desktop-min': 26px,
        'font-size-desktop-max': 30px,
    ),
    'header-3': (
        'font-weight': 600,
        'font-size-mobile-min': 18px,
        'font-size-mobile-max': 20px,
        'line-height': 1.26,
        'font-size-desktop-min': 20px,
        'font-size-desktop-max': 24px,
    ),
    'p-1': (
        'font-size-mobile-min': 14px,
        'font-size-mobile-max': 14px,
        'line-height': 1.3,
        'font-size-desktop-min': 14px,
        'font-size-desktop-max': 16px,
    ),
    'p-2': (
        'font-size-mobile-min': 12px,
        'font-size-mobile-max': 12px,
        'line-height': 1.3,
        'font-size-desktop-min': 12px,
        'font-size-desktop-max': 14px,
    ),
);

$mobileBottomBreakpoint: 320px;
$desktopBottomBreakpoint: 600px;
$desktopTopBreakpoint: 1200px;

// Implementation for responsive typography is taken from
// https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/#for-those-who-dont-mind-that-edge-case
@function responsive-typo($breakpointMin, $breakpointMax, $fontSizeMin, $fontSizeMax) {
    $slope: ($fontSizeMax - $fontSizeMin) / ($breakpointMax - $breakpointMin);
    $yAxisIntersection: -1 * $breakpointMin * $slope + $fontSizeMin;

    // --resize-speed allows to increase speed of resize in case when we need the text to be resized more quick
    @return clamp(#{$fontSizeMin}, calc((#{$yAxisIntersection} + #{$slope * 100}vw) * var(--resize-speed, 1)), #{$fontSizeMax});
}

@mixin font-size($key, $isStatic: false) {
    $props: map-get($typography, $key);
    $fontSizeMobileMin: map-get($props, font-size-mobile-min);
    $fontSizeMobileMax: map-get($props, font-size-mobile-max);
    $fontSizeDesktopMin: map-get($props, font-size-desktop-min);
    $fontSizeDesktopMax: map-get($props, font-size-desktop-max);

    @if $isStatic {
        @media (min-width: $desktopBottomBreakpoint + 1px) {
            --font-size: #{$fontSizeDesktopMax};
        }
    }
    @else {
        --font-size: #{responsive-typo($mobileBottomBreakpoint, $desktopBottomBreakpoint, $fontSizeMobileMin, $fontSizeMobileMax)};

        @media (min-width: $desktopBottomBreakpoint + 1px) {
            --font-size: #{responsive-typo($desktopBottomBreakpoint, $desktopTopBreakpoint, $fontSizeDesktopMin, $fontSizeDesktopMax)};
        }
    }

    font-family: map-get($props, font-family);
    font-weight: map-get($props, font-weight);
    font-size: var(--font-size, #{map-get($props, font-size-mobile-min)});
    line-height: var(--line-height, #{map-get($props, line-height)});
    // safari clamp bug
    // https://stackoverflow.com/questions/37070694/font-size-calc-dynamic-size-safari-failing
    // still works not all the time and need investigation
    min-height: 0vw;
}

@mixin apply-typography-header1($isStatic: false) {
    @include font-size('header-1', $isStatic);
}
@mixin apply-typography-header2($isStatic: false) {
    @include font-size('header-2', $isStatic);
}
@mixin apply-typography-header3($isStatic: false) {
    @include font-size('header-3', $isStatic);
}
@mixin apply-typography-p1($isStatic: false) {
    @include font-size('p-1', $isStatic);
}
@mixin apply-typography-p2($isStatic: false) {
    @include font-size('p-2', $isStatic);
}

.header-1 {
    @include apply-typography-header1();
}

.header-2 {
    @include apply-typography-header2();
}

.header-3 {
    @include apply-typography-header3();
}

.p-1 {
    @include apply-typography-p1();
}

.p-2 {
    @include apply-typography-p2();
}

strong,
b {
    font-weight: 500;
}
